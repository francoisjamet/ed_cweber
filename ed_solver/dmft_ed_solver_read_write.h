!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************

#ifdef NO_SYS_CALL

    subroutine remove_filef(filename1)
    implicit none
    character*(*)  :: filename1
    integer        :: unit_,ios
    logical        :: is_it_opened,checkfile
      write(*,*) 'ERASING FILE : ', trim(adjustl(filename1))
      inquire(file=trim(adjustl(filename1)),exist=checkfile)
      if(.not.checkfile) return
      unit_=20
      do
       unit_=unit_+1
       INQUIRE(unit=unit_,OPENED=is_it_opened,iostat=ios)
       if(.not.is_it_opened.and.ios==0)exit
      enddo
      open(unit=unit_,file=trim(adjustl(filename1)))
      close(unit_,status='delete')
    end subroutine

#endif

!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************

  SUBROUTINE write_header(AIM,UNIT)
    TYPE(AIM_type),    INTENT(IN) :: AIM
    INTEGER, OPTIONAL, INTENT(IN) :: UNIT
 
    CALL dump_message(UNIT=UNIT,TEXT="############") 
    CALL dump_message(UNIT=UNIT,TEXT="############") 
    CALL dump_message(UNIT=UNIT,TEXT="### DMFT ###") 
    CALL dump_message(UNIT=UNIT,TEXT="############") 
    CALL dump_message(UNIT=UNIT,TEXT="############") 

    CALL dump_message(UNIT=UNIT,TEXT="# THIS IS PROCESS "//c2s(i2c(iproc))//" OF "//c2s(i2c(nproc))//" RUNNING ON "//TRIM(ADJUSTL(procname)))

#ifdef _complex
    CALL dump_message(UNIT=UNIT,TEXT="# FLAG: COMPLEX HAMILTONIAN")
#else
    CALL dump_message(UNIT=UNIT,TEXT="# FLAG: REAL HAMILTONIAN")
#endif

    CALL write_info_DMFT_loop(UNIT=UNIT)
    CALL write_impurity(AIM%impurity,UNIT=UNIT)
    CALL write_info_correlations(UNIT=UNIT)
    CALL write_info_solver(UNIT=UNIT)

  END SUBROUTINE 

!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************

  SUBROUTINE write_begin_iter(UNIT)
    INTEGER, INTENT(IN), OPTIONAL :: UNIT
    INTEGER                       :: unit_

                       unit_ = log_unit
    IF(PRESENT(UNIT))  unit_ = UNIT

    CALL dump_message(UNIT=UNIT,TEXT="#")
    CALL dump_message(UNIT=UNIT,TEXT="#########################")
    CALL dump_message(UNIT=UNIT,TEXT="#########################")
    WRITE(unit_,'(a,I2,a)') "### DMFT iteration ",iterdmft," ###"
    CALL dump_message(UNIT=UNIT,TEXT="#########################")
    CALL dump_message(UNIT=UNIT,TEXT="#########################")
    CALL dump_message(UNIT=UNIT,TEXT="#")
  END SUBROUTINE

!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************

  SUBROUTINE read_DMFT_parameters(nmatsu_frequ,FLAGIMP,nstep,Nc)
  integer                      :: ff,ii,nmatsu_frequ,FLAGIMP,nstep,Nc
  type(namelist_set)           :: nm
  logical                      :: target
  real(8)                      :: targetobs,obserror,paramerror
  character(20)                :: fileb,filec
 
   ii         =   FLAGIMP
   niterdmft  =   nstep
   fileb      =  'ed_hybrid'//TRIM(ADJUSTL(toString(ii)))
   filec      =  'ed_correl'//TRIM(ADJUSTL(toString(ii)))

  !-------------------------------------------------------------------------------------------------------------------------------!
   call namelist_init(nm,400,name_of_namelist='DMFT_ED_SOLVER main input')
#include "dmft_ed_solver_variables.h"
   call look_for_command_line_argument(nm) ! to define input files 
   call look_for_namelist_in_file(nm,EDfile)
   call look_for_command_line_argument(nm)
  !-------------------------------------------------------------------------------------------------------------------------------!
#include "dmft_ed_solver_flags.h"
  !-------------------------------------------------------------------------------------------------------------------------------!

  if(size2>1.and..not.no_mpi) then
     write(*,*) 'DONE WITH READING INPUT FILES, RANK = ', rank
     call mpibarrier
  endif

  if(set_omp_thread_during_solver>0)then
    call omp_set_num_threads(set_omp_thread_during_solver)
    call init_openmp
  endif

  END SUBROUTINE 

!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************

  SUBROUTINE write_info_DMFT_loop(UNIT)

    INTEGER, OPTIONAL, INTENT(IN) :: UNIT
    INTEGER                       :: unit_,rank
    CHARACTER(LEN=100)            :: fmt_archive
                      unit_ = log_unit
    IF(PRESENT(UNIT)) unit_ = UNIT
    WRITE(unit_,'(a,I0,a)') "# WILL PERFORM UP TO ",niterdmft," DMFT ITERATIONS"
    CALL flush(unit_)

  END SUBROUTINE

!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************

  SUBROUTINE write_footer(AIM,GS,UNIT)

    TYPE(AIM_type),             INTENT(IN) :: AIM
    TYPE(eigensectorlist_type), INTENT(IN) :: GS
    INTEGER, OPTIONAL, INTENT(IN)          :: UNIT
    INTEGER                                :: unit_

                      unit_ = log_unit
    IF(PRESENT(UNIT)) unit_ = UNIT
    CALL dump_message(UNIT=unit_,TEXT="##############################") 
    CALL dump_message(UNIT=unit_,TEXT="##############################") 
    CALL dump_message(UNIT=unit_,TEXT="### END OF DMFT ITERATIONS ###") 
    CALL dump_message(UNIT=unit_,TEXT="##############################") 
    CALL dump_message(UNIT=unit_,TEXT="##############################") 
    CALL write_bath(AIM%bath,UNIT=unit_)
    CALL write_static(AIM,GS,UNIT=unit_)

  END SUBROUTINE 

!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
!**************************************************************************
